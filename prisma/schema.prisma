generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  // relationMode = "prisma"
}

model User {
  id                Int                 @id 
  clerkId String?
  addressId         Int?             @map("addressid")
  userTypeId        Int              @default(0) @map("usertypeid")
  birthdate         DateTime?
  cuil_cuit         String?             @db.VarChar(11)
  names             String?
  address           Address?            @relation(fields: [addressId], references: [id])
  userType          UserType            @relation(fields: [userTypeId], references: [id])
  userInSavingsPlan UserInSavingsPlan[]
  cars              Car[]
  tutorialStep      Int                 @default(1)
  tutorialDone      Boolean             @default(false)

  @@map("users")
}

model UserType {
  id          Int      @id 
  createdAt   DateTime @default(now())
  description String   @unique
  users       User[]

  @@map("user_types")
}

model UserInSavingsPlan {
  id          Int         @id 
  planId      Int         @map("planid")
  userId      Int         @map("userid")
  user        User        @relation(fields: [userId], references: [id])
  savingsPlan SavingsPlan @relation(fields: [planId], references: [id])
  invoices    PaymentInvoice[]

  @@unique([planId, userId], map: "plan_id_user_id_unique")
  @@unique([userId, planId], map: "savings_plans_users_userId_planId_key")
  @@index([userId], map: "savings_plans_users_userId_idx")
  @@map("savings_plans_users")
}

model SavingsPlan {
  id                Int                 @id
  statusId          Int @map("statusid")
  portfolioId       BigInt  @map("portfolioid")
  automotiveId      Int     @map("automotiveid")
  description       String?
  plan_months       Int
  plan_total_months Int
  paymentMethodId   Int?    @map("paymentmethodid")
  startDate         DateTime? @map("startdate")
  endDate           DateTime? @map("enddate")
  carModelId        BigInt  @map("carmodelid")
  movingValue       String @map("movingvalue")
  automotive Automotive @relation(fields: [automotiveId], references: [id])
  status            SavingsPlanStatus   @relation(fields: [statusId], references: [id])
  usersInPlan       UserInSavingsPlan[]
  // portfolio         Portfolio           @relation(fields: [portfolioId], references: [id])
  paymentMethod     PaymentMethod?       @relation(fields: [paymentMethodId], references: [id])
  // carModel          CarModel            @relation(fields: [carModelId], references: [id])

  @@index([statusId], map: "savings_plans_statusId_idx")
  @@index([paymentMethodId], map: "savings_plans_paymentMethodId_idx")
  @@index([portfolioId], map: "savings_plans_portfolioId_idx")
  @@index([carModelId], map: "savings_plans_carModelId_idx")
  @@index([automotiveId], map: "savings_plans_automotiveId_idx")
  @@map("savings_plans")
}

model PaymentInvoice {
  id                String            @id @default(cuid())
  createdAt         DateTime          @default(now())
  planId            Int
  userId            Int
  userInSavingsPlan UserInSavingsPlan @relation(fields: [userId, planId], references: [userId, planId])
  paymentMethodId   Int
  paymentMethod     PaymentMethod     @relation(fields: [paymentMethodId], references: [id])
  amountArs         Decimal           @db.Decimal()
  paymentDate       DateTime
  installmentNumber Int

  @@index([paymentMethodId])
  @@index([userId, planId])
  @@map("payment_invoices")
}

model PaymentMethod {
  id           Int           @id
  createdAt    DateTime      @default(now()) @map("createdat")
  description  String        @unique(map: "payment_method_description_unique")
  invoices     PaymentInvoice[]
  savingsPlans SavingsPlan[]

  @@map("payment_methods")
}

model SavingsPlanStatus {
  id           Int           @id
  description  String        @unique(map: "savings_plan_status_description_unique")
  savingsPlans SavingsPlan[]

  @@map("savings_plan_status")
}

model Car {
  id         BigInt      @id @default(autoincrement())
  plate      String?  
  userId     Int @map("userid")
  is_awarded Boolean @default(false)
  is_drawn   Boolean @default(false)
  carModelId Int @map("carmodelid")
  user       User     @relation(fields: [userId], references: [id])
  carModel   CarModel @relation(fields: [carModelId], references: [id])

  @@index([userId], map: "cars_userId_idx")
  @@index([carModelId], map: "cars_carModelId_idx")
  @@map("cars")
}

model CarModel {
  id           Int           @id
  description  String        @unique(map: "car_model_description_unique")
  amountdoors  Int           @default(4)
  carPhotos CarPhoto[]
  // savingsPlans SavingsPlan[]
  cars         Car[]

  @@map("car_models")
}

model CarPhoto {
  id         String    @id @default(cuid())
  url        String    @db.Text
  epigraph   String?   @db.Text
  carModelId Int?
  carModel   CarModel? @relation(fields: [carModelId], references: [id])

  @@index([carModelId])
  @@map("car_photos")
}

model Portfolio {
  id              Int            @id 
  createdAt       DateTime       @default(now()) @map("createdat")
  carDealershipId BigInt?  @map("cardealershipid")
  automotiveId    Int @map("automotiveid")
  groupId         Int @map("groupid")
  orderid         Int
  automotive      Automotive?    @relation(fields: [automotiveId], references: [id])
  // savingsPlans    SavingsPlan[]

  @@index([automotiveId])
  @@index([carDealershipId])
  @@map("portfolios")
}

model CarDealership {
  id            String      @id @default(cuid())
  description   String
  addressId     Int @map("addressid")
  cuit          String      @db.VarChar(11)
  code          Int
  automotivesId Int? @map("automotivesid")
  automotive Automotive? @relation(fields: [automotivesId], references: [id])
  address       Address     @relation(fields: [addressId], references: [id])

  @@index([addressId])
  @@map("car_dealerships")
}

model Automotive {
  id          Int         @id
  description String
  logo        String
  createdAt   DateTime    @default(now()) @map("createdat")
  addressId   Int?  @map("addressid")
  address     Address?     @relation(fields: [addressId], references: [id])
  portfolios  Portfolio[]
  carDealership CarDealership[]
  savingsPlans SavingsPlan[]

  @@index([addressId])
  @@map("automotives")
}

model Address {
  id             Int          @id
  street         String
  streetNumber   Int @map("streetnumber")
  province       String
  city           String
  district       String
  postalCode     Int  @map("postalcode")
  additionalData String @map("additionaldata")
  users          User[]
  carDealerships CarDealership[]
  automotives    Automotive[]

  @@map("addresses")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model vw_stg {
  grupo             Int?
  orden             Int?
  ncuota            Int?
  mesesplan         Int?
  modelosuscripto   String?
  valormovil        String?
  cuotapagas        Int?
  cuotasanticipadas Int?
  cuotasimpagas     Int?
  cuotasavencer     Int?
  estado            String?
  nombre            String?
  persona           String?
  nconcesionario    Int?
  cuil_cuit         String? @db.VarChar(11)

  @@ignore
}
