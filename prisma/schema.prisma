// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                String              @id @default(cuid())
  addressId         String?             @unique
  address           Address?            @relation(fields: [addressId], references: [id])
  userTypeId        String              @unique
  userType          UserType            @relation(fields: [userTypeId], references: [id])
  birthdate         DateTime?
  clerkId String?
  phone String?
  email String? 
  name String?
  surname String?
  cuit              String?             @db.VarChar(11)
  userInSavingsPlan UserInSavingsPlan[]
  cars              Car[]
  tutorialStep      Int                 @default(1)
  tutorialDone      Boolean             @default(false)
  guarantors Guarantor[]

  @@map("users")
}

model Guarantor {
  id Int @id @default(autoincrement())
  userId String 
  user User @relation(fields: [userId], references: [id])
  name String
  surname String
  phone String
  email String
  cuit String
  addressId String?
  address Address? @relation(fields: [addressId], references: [id])

  @@index([addressId])
  @@map("guarantors")
  @@index([userId])
}

model UserType {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  description String   @unique
  users       User[]

  @@map("user_types")
}

model UserInSavingsPlan {
  id          String           @id @default(cuid())
  planId      String
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  savingsPlan SavingsPlan      @relation(fields: [planId], references: [id])
  invoices    PaymentInvoice[]

  @@unique([planId, userId], map: "plan_id_user_id_unique")
  @@unique([userId, planId])
  @@index([userId])
  @@map("savings_plans_users")
}

model SavingsPlan {
  id                String              @id @default(cuid())
  statusId          String
  status            SavingsPlanStatus   @relation(fields: [statusId], references: [id])
  usersInPlan       UserInSavingsPlan[]
  portfolioId       String
  portfolio         Portfolio           @relation(fields: [portfolioId], references: [id])
  title             String
  description       String
  plan_months       Int
  plan_total_months Int
  paymentMethodId   String
  paymentMethod     PaymentMethod       @relation(fields: [paymentMethodId], references: [id])
  startDate         DateTime
  endDate           DateTime
  carModelId        String
  carModel          CarModel            @relation(fields: [carModelId], references: [id])
  movingValue       Int

  @@index([statusId])
  @@index([paymentMethodId])
  @@index([portfolioId])
  @@index([carModelId])
  @@map("savings_plans")
}

model PaymentInvoice {
  id                String            @id @default(cuid())
  createdAt         DateTime          @default(now())
  planId            String
  userId            String
  userInSavingsPlan UserInSavingsPlan @relation(fields: [userId, planId], references: [userId, planId])
  paymentMethodId   String
  paymentMethod     PaymentMethod     @relation(fields: [paymentMethodId], references: [id])
  amountArs         Decimal           @db.Decimal()
  paymentDate       DateTime
  installmentNumber Int

  @@index([paymentMethodId])
  @@index([userId, planId])
  @@map("payment_invoices")
}

model PaymentMethod {
  id           String           @id @default(cuid())
  createdAt    DateTime         @default(now())
  description  String
  invoices     PaymentInvoice[]
  savingsPlans SavingsPlan[]

  @@unique([description], map: "payment_method_description_unique")
  @@map("payment_methods")
}

model SavingsPlanStatus {
  id           String        @id @default(cuid())
  description  String
  savingsPlans SavingsPlan[]

  @@unique([description], map: "savings_plan_status_description_unique")
  @@map("savings_plan_status")
}

model Car {
  id         String     @id @default(cuid())
  plate      String
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  is_awarded Boolean
  is_drawn   Boolean
  carPhoto   CarPhoto[]
  carModelId String
  carModel   CarModel   @relation(fields: [carModelId], references: [id])

  @@unique([plate], map: "car_plate_unique")
  @@index([userId])
  @@index([carModelId])
  @@map("cars")
}

model CarModel {
  id           String        @id @default(cuid())
  description  String
  amountDoors  Int           @default(4)
  carPhotos    CarPhoto[]
  savingsPlans SavingsPlan[]
  cars         Car[]

  @@unique([description], map: "car_model_description_unique")
  @@map("car_models")
}

model CarPhoto {
  id         String    @id @default(cuid())
  url        String    @db.Text
  epigraph   String?   @db.Text
  carId      String?
  car        Car?      @relation(fields: [carId], references: [id])
  carModelId String?
  carModel   CarModel? @relation(fields: [carModelId], references: [id])

  @@index([carId])
  @@index([carModelId])
  @@map("car_photos")
}

model Portfolio {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now())
  carDealershipId String?
  carDealership   CarDealership? @relation(fields: [carDealershipId], references: [id])
  automotiveId    String?
  automotive      Automotive?    @relation(fields: [automotiveId], references: [id])
  savingsPlans    SavingsPlan[]

  @@index([carDealershipId])
  @@index([automotiveId])
  @@map("portfolios")
}

model CarDealership {
  id          String      @id @default(cuid())
  description String      @db.Text
  addressId   String
  address     Address     @relation(fields: [addressId], references: [id])
  cuit        String      @db.VarChar(11)
  code        Int
  portfolios  Portfolio[]

  @@index([addressId])
  @@map("car_dealerships")
}

model Automotive {
  id          String      @id @default(cuid())
  description String      @db.Text
  logo        String      @db.Text
  createdAt   DateTime    @default(now())
  addressId   String
  address     Address     @relation(fields: [addressId], references: [id])
  portfolios  Portfolio[]

  @@index([addressId])
  @@map("automotives")
}

model Address {
  id             String          @id @default(cuid())
  street         String
  streetNumber   Int?
  province       String
  city           String
  district       String
  postalCode     Int
  additionalData String?
  users          User[]
  carDealerships CarDealership[]
  automotives    Automotive[]
  guarantors Guarantor[]

  @@map("addresses")
}
